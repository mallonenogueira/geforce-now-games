{"version":3,"sources":["services/games.js","components/Input.js","utils/format-label.js","components/Header.js","components/ApplicationLoading.js","components/SteamLink.js","components/LabelValue.js","components/CargGame.js","components/Application.js","App.js","utils/debounce.js","index.js"],"names":["GEFORCE_URL","GameService","[object Object]","fetch","then","data","json","games","map","mapSteam","game","steam","steamUrl","_game$steamUrl$split","split","_game$steamUrl$split2","Object","slicedToArray","id","smallImageUrl","concat","imageUrl","objectSpread2","undefined","Input","label","onChange","value","className","react_default","a","createElement","htmlFor","formatLabel","charAt","toUpperCase","slice","replace","Header","title","mobileTitle","filters","onChangeFilters","data-mobile","keys","field","alwaysVisible","key","e","target","ApplicationLoading","children","loading","SteamLink","href","rel","src","alt","LabelValue","CardGame","publisher","isFullyOptimized","isHighlightsSupported","genres","join","Application","length","ApplicationEmpty","debounce","fn","wait","clearTimeout","setTimeout","createDebounce","App","_useState","useState","_useState2","setGames","_useState3","_useState4","fetching","setFetching","_useState5","_useState6","setLoading","_useState7","_useState8","filteredGames","setFilteredGames","_useState9","isFiltering","_useState10","setFilters","useEffect","fetchGames","dataGames","filter","filledKeys","find","toString","toLowerCase","includes","filtersByFilterObject","Fragment","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.503aa03b.chunk.js","sourcesContent":["const GEFORCE_URL =\n  'https://static.nvidiagrid.net/supported-public-game-list/gfnpc.json?JSON';\n\nexport default class GameService {\n  static fetchGames() {\n    return fetch(GEFORCE_URL)\n      .then((data) => data.json())\n      .then((games) => games.map(GameService.mapSteam));\n  }\n\n  static mapSteam(game = {}) {\n    const steam = {};\n\n    if (game.steamUrl) {\n      [, steam.id] = game.steamUrl.split('/app/');\n      steam.steamUrl = game.steamUrl;\n      steam.smallImageUrl = `https://steamcdn-a.akamaihd.net/steam/apps/${steam.id}/capsule_184x69.jpg`;\n      steam.imageUrl = `https://steamcdn-a.akamaihd.net/steam/apps/${steam.id}/header.jpg`;\n    }\n\n    return {\n      ...game,\n      steamUrl: undefined,\n      steam: steam.id ? steam : null,\n    };\n  }\n}\n","import React from 'react';\n\nexport default function Input({ label, id, onChange, value, className = '' }) {\n  return (\n    <label className={`input ${className}`} htmlFor={id}>\n      <span className=\"input-label\">{label}</span>\n      <input\n        className=\"input-element\"\n        id={id}\n        onChange={onChange}\n        value={value}\n      />\n    </label>\n  );\n}\n","export default function formatLabel(label = '') {\n  return (\n    label.charAt(0).toUpperCase() + label.slice(1).replace(/([A-Z])/g, ' $1')\n  );\n}\n","import React from 'react';\n\nimport Input from 'components/Input';\nimport formatLabel from 'utils/format-label';\n\nexport default function Header({\n  title,\n  mobileTitle,\n  filters,\n  onChangeFilters,\n}) {\n  return (\n    <header className=\"filters\">\n      <h2 className=\"filters-title\" data-mobile={mobileTitle}>\n        <div className=\"d-sm-none\">{title}</div>\n        <div className=\"d-none d-sm-block\">{mobileTitle}</div>\n      </h2>\n\n      <div className=\"filters-body\">\n        {Object.keys(filters).map((field) => (\n          <Input\n            className={filters[field].alwaysVisible ? '' : 'd-md-none'}\n            key={field}\n            id={field}\n            label={formatLabel(field)}\n            value={filters[field].value}\n            onChange={(e) => onChangeFilters(field, e.target.value)}\n          />\n        ))}\n      </div>\n    </header>\n  );\n}\n","import React from 'react';\n\nexport default function ApplicationLoading({ children, loading }) {\n  if (loading) {\n    return <div className=\"application-loading\" />;\n  }\n\n  return children;\n}\n","import React from 'react';\n\nexport default function SteamLink({ steam }) {\n  if (steam) {\n    return (\n      <a\n        className=\"steam-container\"\n        href={steam.steamUrl}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        <img className=\"steam-image\" src={steam.imageUrl} alt=\"\" />\n      </a>\n    );\n  }\n\n  return (\n    <div className=\"steam-container\">\n      <img\n        className=\"steam-image\"\n        src=\"https://via.placeholder.com/468x215?text=Sem informações da steam.\"\n        alt=\"\"\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function LabelValue({ label, value }) {\n  return (\n    <div>\n      <span className=\"label\">{label}</span>\n      <span className=\"value\">{`${value}`}</span>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport SteamLink from 'components/SteamLink';\nimport LabelValue from 'components/LabelValue';\nimport formatLabel from 'utils/format-label';\n\nexport default function CardGame({ game, className = '' }) {\n  return (\n    <div key={game.id} className={`card-game ${className}`}>\n      <SteamLink steam={game.steam} />\n\n      <div className=\"card-game-body\">\n        <LabelValue label={formatLabel('title:')} value={game.title} />\n        <LabelValue label={formatLabel('publisher:')} value={game.publisher} />\n        <LabelValue\n          label={formatLabel('isFullyOptimized:')}\n          value={game.isFullyOptimized}\n        />\n        <LabelValue\n          label={formatLabel('isHighlightsSupported:')}\n          value={game.isHighlightsSupported}\n        />\n        <LabelValue\n          label={formatLabel('genres:')}\n          value={game.genres.join(', ')}\n        />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport ApplicationLoading from 'components/ApplicationLoading';\nimport CardGame from 'components/CargGame';\n\nexport default function Application({ loading, games }) {\n  return (\n    <main className=\"application row\">\n      <ApplicationLoading loading={loading}>\n        {!!games.length &&\n          games.map((game) => (\n            <div className=\"col-4\" key={game.id}>\n              <CardGame game={game} />\n            </div>\n          ))}\n        {!games.length && <ApplicationEmpty />}\n      </ApplicationLoading>\n    </main>\n  );\n}\n\nfunction ApplicationEmpty() {\n  return <p className=\"application-empty\">Nenhum jogo foi encontrado.</p>;\n}\n","import React, { useEffect, useState } from 'react';\n\nimport GameService from 'services/games';\nimport Header from 'components/Header';\nimport Application from 'components/Application';\n\nimport 'styles.css';\nimport createDebounce from 'utils/debounce';\n\nfunction filtersByFilterObject(filters) {\n  const filledKeys = Object.keys(filters).filter(\n    (field) => filters[field].isFiltering\n  );\n\n  if (!filledKeys.length) {\n    return () => true;\n  }\n\n  return (data) => {\n    return filledKeys.find((label) => {\n      return !!data[label]\n        .toString()\n        .toLowerCase()\n        .includes(filters[label].value.toLowerCase());\n    });\n  };\n}\n\nconst debounce = createDebounce();\n\nexport default function App() {\n  const [games, setGames] = useState([]);\n  const [fetching, setFetching] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const [filteredGames, setFilteredGames] = useState([]);\n  const [filters, setFilters] = useState({\n    title: { value: '', isFiltering: false, alwaysVisible: true },\n    publisher: { value: '', isFiltering: false, alwaysVisible: true },\n    isFullyOptimized: { value: '', isFiltering: false },\n    isHighlightsSupported: { value: '', isFiltering: false },\n    genres: { value: '', isFiltering: false },\n  });\n\n  useEffect(() => {\n    GameService.fetchGames()\n      .then((dataGames) => setGames(dataGames))\n      .then(() => setFetching(false));\n  }, []);\n\n  useEffect(() => {\n    debounce(() => setLoading(true))(0);\n\n    setFilteredGames(games.filter(filtersByFilterObject(filters)));\n\n    debounce(() => setLoading(false))(250);\n  }, [games, filters]);\n\n  return (\n    <>\n      <Header\n        title=\"GeForce-Now | Games\"\n        mobileTitle=\"GF-Now Games\"\n        filters={filters}\n        onChangeFilters={(label, value) => {\n          setFilters({\n            ...filters,\n            [label]: {\n              value,\n              isFiltering: !!value,\n            },\n          });\n        }}\n      />\n\n      <Application loading={loading || fetching} games={filteredGames} />\n    </>\n  );\n}\n","export default function createDebounce() {\n  let id = null;\n\n  return (fn) => (wait) => {\n    clearTimeout(id);\n\n    if (wait > 0) {\n      id = setTimeout(fn, wait);\n    } else {\n      fn();\n    }\n  };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}